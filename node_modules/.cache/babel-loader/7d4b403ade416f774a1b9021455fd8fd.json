{"ast":null,"code":"import { updateLocation, updateInLocation } from 'serialize-query-params';\n/**\n * Creates a new location object containing the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n * The default is pushIn.\n */\n\nexport function createLocationWithChanges(queryReplacements, location, updateType, stringifyOptions) {\n  if (updateType === void 0) {\n    updateType = 'pushIn';\n  }\n\n  switch (updateType) {\n    case 'replace':\n    case 'push':\n      return updateLocation(queryReplacements, location, stringifyOptions);\n\n    case 'replaceIn':\n    case 'pushIn':\n    default:\n      return updateInLocation(queryReplacements, location, stringifyOptions);\n  }\n}\n/**\n * Updates the URL to the new location.\n */\n\nexport function updateUrlQuery(history, location, updateType) {\n  if (updateType === void 0) {\n    updateType = 'pushIn';\n  }\n\n  switch (updateType) {\n    case 'pushIn':\n    case 'push':\n      history.push(location);\n      break;\n\n    case 'replaceIn':\n    case 'replace':\n    default:\n      history.replace(location);\n      break;\n  }\n}","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/use-query-params/esm/updateUrlQuery.js"],"names":["updateLocation","updateInLocation","createLocationWithChanges","queryReplacements","location","updateType","stringifyOptions","updateUrlQuery","history","push","replace"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,QAAkD,wBAAlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,iBAAnC,EAAsDC,QAAtD,EAAgEC,UAAhE,EAA4EC,gBAA5E,EAA8F;AACjG,MAAID,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,IAAAA,UAAU,GAAG,QAAb;AAAwB;;AACrD,UAAQA,UAAR;AACI,SAAK,SAAL;AACA,SAAK,MAAL;AACI,aAAOL,cAAc,CAACG,iBAAD,EAAoBC,QAApB,EAA8BE,gBAA9B,CAArB;;AACJ,SAAK,WAAL;AACA,SAAK,QAAL;AACA;AACI,aAAOL,gBAAgB,CAACE,iBAAD,EAAoBC,QAApB,EAA8BE,gBAA9B,CAAvB;AAPR;AASH;AACD;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCJ,QAAjC,EAA2CC,UAA3C,EAAuD;AAC1D,MAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,IAAAA,UAAU,GAAG,QAAb;AAAwB;;AACrD,UAAQA,UAAR;AACI,SAAK,QAAL;AACA,SAAK,MAAL;AACIG,MAAAA,OAAO,CAACC,IAAR,CAAaL,QAAb;AACA;;AACJ,SAAK,WAAL;AACA,SAAK,SAAL;AACA;AACII,MAAAA,OAAO,CAACE,OAAR,CAAgBN,QAAhB;AACA;AATR;AAWH","sourcesContent":["import { updateLocation, updateInLocation, } from 'serialize-query-params';\n/**\n * Creates a new location object containing the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n * The default is pushIn.\n */\nexport function createLocationWithChanges(queryReplacements, location, updateType, stringifyOptions) {\n    if (updateType === void 0) { updateType = 'pushIn'; }\n    switch (updateType) {\n        case 'replace':\n        case 'push':\n            return updateLocation(queryReplacements, location, stringifyOptions);\n        case 'replaceIn':\n        case 'pushIn':\n        default:\n            return updateInLocation(queryReplacements, location, stringifyOptions);\n    }\n}\n/**\n * Updates the URL to the new location.\n */\nexport function updateUrlQuery(history, location, updateType) {\n    if (updateType === void 0) { updateType = 'pushIn'; }\n    switch (updateType) {\n        case 'pushIn':\n        case 'push':\n            history.push(location);\n            break;\n        case 'replaceIn':\n        case 'replace':\n        default:\n            history.replace(location);\n            break;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}