{"ast":null,"code":"/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function decodeQueryParams(paramConfigMap, encodedQuery) {\n  var decodedQuery = {}; // iterate over all keys in the config (#30)\n\n  var paramNames = Object.keys(paramConfigMap); // ensure any non configured keys that are in the URL are also included\n\n  for (var _i = 0, _a = Object.keys(encodedQuery); _i < _a.length; _i++) {\n    var encodedKey = _a[_i];\n\n    if (paramConfigMap[encodedKey] == null) {\n      paramNames.push(encodedKey);\n    }\n  }\n\n  for (var _b = 0, paramNames_1 = paramNames; _b < paramNames_1.length; _b++) {\n    var paramName = paramNames_1[_b];\n    var encodedValue = encodedQuery[paramName];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Passing through parameter \" + paramName + \" during decoding since it was not configured.\");\n      } // NOTE: we could just not include it, but it is probably convenient to have\n      // it default to be a string type.\n\n\n      decodedQuery[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n    }\n  }\n\n  return decodedQuery;\n}","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/serialize-query-params/esm/decodeQueryParams.js"],"names":["decodeQueryParams","paramConfigMap","encodedQuery","decodedQuery","paramNames","Object","keys","_i","_a","length","encodedKey","push","_b","paramNames_1","paramName","encodedValue","process","env","NODE_ENV","console","warn","decode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAT,CAA2BC,cAA3B,EAA2CC,YAA3C,EAAyD;AAC5D,MAAIC,YAAY,GAAG,EAAnB,CAD4D,CAE5D;;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAjB,CAH4D,CAI5D;;AACA,OAAK,IAAIM,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGH,MAAM,CAACC,IAAP,CAAYJ,YAAZ,CAAtB,EAAiDK,EAAE,GAAGC,EAAE,CAACC,MAAzD,EAAiEF,EAAE,EAAnE,EAAuE;AACnE,QAAIG,UAAU,GAAGF,EAAE,CAACD,EAAD,CAAnB;;AACA,QAAIN,cAAc,CAACS,UAAD,CAAd,IAA8B,IAAlC,EAAwC;AACpCN,MAAAA,UAAU,CAACO,IAAX,CAAgBD,UAAhB;AACH;AACJ;;AACD,OAAK,IAAIE,EAAE,GAAG,CAAT,EAAYC,YAAY,GAAGT,UAAhC,EAA4CQ,EAAE,GAAGC,YAAY,CAACJ,MAA9D,EAAsEG,EAAE,EAAxE,EAA4E;AACxE,QAAIE,SAAS,GAAGD,YAAY,CAACD,EAAD,CAA5B;AACA,QAAIG,YAAY,GAAGb,YAAY,CAACY,SAAD,CAA/B;;AACA,QAAI,CAACb,cAAc,CAACa,SAAD,CAAnB,EAAgC;AAC5B,UAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCC,QAAAA,OAAO,CAACC,IAAR,CAAa,+BAA+BN,SAA/B,GAA2C,+CAAxD;AACH,OAH2B,CAI5B;AACA;;;AACAX,MAAAA,YAAY,CAACW,SAAD,CAAZ,GAA0BC,YAA1B;AACH,KAPD,MAQK;AACDZ,MAAAA,YAAY,CAACW,SAAD,CAAZ,GAA0Bb,cAAc,CAACa,SAAD,CAAd,CAA0BO,MAA1B,CAAiCN,YAAjC,CAA1B;AACH;AACJ;;AACD,SAAOZ,YAAP;AACH","sourcesContent":["/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function decodeQueryParams(paramConfigMap, encodedQuery) {\n    var decodedQuery = {};\n    // iterate over all keys in the config (#30)\n    var paramNames = Object.keys(paramConfigMap);\n    // ensure any non configured keys that are in the URL are also included\n    for (var _i = 0, _a = Object.keys(encodedQuery); _i < _a.length; _i++) {\n        var encodedKey = _a[_i];\n        if (paramConfigMap[encodedKey] == null) {\n            paramNames.push(encodedKey);\n        }\n    }\n    for (var _b = 0, paramNames_1 = paramNames; _b < paramNames_1.length; _b++) {\n        var paramName = paramNames_1[_b];\n        var encodedValue = encodedQuery[paramName];\n        if (!paramConfigMap[paramName]) {\n            if (process.env.NODE_ENV === 'development') {\n                console.warn(\"Passing through parameter \" + paramName + \" during decoding since it was not configured.\");\n            }\n            // NOTE: we could just not include it, but it is probably convenient to have\n            // it default to be a string type.\n            decodedQuery[paramName] = encodedValue;\n        }\n        else {\n            decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n        }\n    }\n    return decodedQuery;\n}\n"]},"metadata":{},"sourceType":"module"}