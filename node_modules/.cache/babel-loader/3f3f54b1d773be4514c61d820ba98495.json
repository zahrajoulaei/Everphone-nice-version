{"ast":null,"code":"import * as Serialize from './serialize';\n/**\n * String values\n */\n\nexport var StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\n/**\n * String enum\n */\n\nexport var createEnumParam = function (enumValues) {\n  return {\n    encode: Serialize.encodeString,\n    decode: function (input) {\n      return Serialize.decodeEnum(input, enumValues);\n    }\n  };\n};\n/**\n * Numbers (integers or floats)\n */\n\nexport var NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\n/**\n * For flat objects where values are strings\n */\n\nexport var ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexport var ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexport var NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\n\nexport var JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\n\nexport var DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: function (valueA, valueB) {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB; // ignore time of day\n\n    return valueA.getFullYear() === valueB.getFullYear() && valueA.getMonth() === valueB.getMonth() && valueA.getDate() === valueB.getDate();\n  }\n};\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\n\nexport var DateTimeParam = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: function (valueA, valueB) {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n    return valueA.valueOf() === valueB.valueOf();\n  }\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\n\nexport var BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\n/**\n * For flat objects where the values are numbers\n */\n\nexport var NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexport var DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\n\nexport var DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/serialize-query-params/esm/params.js"],"names":["Serialize","StringParam","encode","encodeString","decode","decodeString","createEnumParam","enumValues","input","decodeEnum","NumberParam","encodeNumber","decodeNumber","ObjectParam","encodeObject","decodeObject","ArrayParam","encodeArray","decodeArray","NumericArrayParam","encodeNumericArray","decodeNumericArray","JsonParam","encodeJson","decodeJson","DateParam","encodeDate","decodeDate","equals","valueA","valueB","getFullYear","getMonth","getDate","DateTimeParam","encodeDateTime","decodeDateTime","valueOf","BooleanParam","encodeBoolean","decodeBoolean","NumericObjectParam","encodeNumericObject","decodeNumericObject","DelimitedArrayParam","encodeDelimitedArray","decodeDelimitedArray","DelimitedNumericArrayParam","encodeDelimitedNumericArray","decodeDelimitedNumericArray"],"mappings":"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","sourcesContent":["import * as Serialize from './serialize';\n/**\n * String values\n */\nexport var StringParam = {\n    encode: Serialize.encodeString,\n    decode: Serialize.decodeString,\n};\n/**\n * String enum\n */\nexport var createEnumParam = function (enumValues) { return ({\n    encode: Serialize.encodeString,\n    decode: function (input) { return Serialize.decodeEnum(input, enumValues); },\n}); };\n/**\n * Numbers (integers or floats)\n */\nexport var NumberParam = {\n    encode: Serialize.encodeNumber,\n    decode: Serialize.decodeNumber,\n};\n/**\n * For flat objects where values are strings\n */\nexport var ObjectParam = {\n    encode: Serialize.encodeObject,\n    decode: Serialize.decodeObject,\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var ArrayParam = {\n    encode: Serialize.encodeArray,\n    decode: Serialize.decodeArray,\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var NumericArrayParam = {\n    encode: Serialize.encodeNumericArray,\n    decode: Serialize.decodeNumericArray,\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\nexport var JsonParam = {\n    encode: Serialize.encodeJson,\n    decode: Serialize.decodeJson,\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\nexport var DateParam = {\n    encode: Serialize.encodeDate,\n    decode: Serialize.decodeDate,\n    equals: function (valueA, valueB) {\n        if (valueA === valueB)\n            return true;\n        if (valueA == null || valueB == null)\n            return valueA === valueB;\n        // ignore time of day\n        return (valueA.getFullYear() === valueB.getFullYear() &&\n            valueA.getMonth() === valueB.getMonth() &&\n            valueA.getDate() === valueB.getDate());\n    },\n};\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\nexport var DateTimeParam = {\n    encode: Serialize.encodeDateTime,\n    decode: Serialize.decodeDateTime,\n    equals: function (valueA, valueB) {\n        if (valueA === valueB)\n            return true;\n        if (valueA == null || valueB == null)\n            return valueA === valueB;\n        return valueA.valueOf() === valueB.valueOf();\n    },\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\nexport var BooleanParam = {\n    encode: Serialize.encodeBoolean,\n    decode: Serialize.decodeBoolean,\n};\n/**\n * For flat objects where the values are numbers\n */\nexport var NumericObjectParam = {\n    encode: Serialize.encodeNumericObject,\n    decode: Serialize.decodeNumericObject,\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var DelimitedArrayParam = {\n    encode: Serialize.encodeDelimitedArray,\n    decode: Serialize.decodeDelimitedArray,\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\nexport var DelimitedNumericArrayParam = {\n    encode: Serialize.encodeDelimitedNumericArray,\n    decode: Serialize.decodeDelimitedNumericArray,\n};\n"]},"metadata":{},"sourceType":"module"}