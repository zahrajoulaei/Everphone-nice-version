{"ast":null,"code":"import * as React from 'react';\nimport { updateUrlQuery, createLocationWithChanges } from './updateUrlQuery';\nvar providerlessContextValue = {\n  location: {},\n  getLocation: function () {\n    return {};\n  },\n  setLocation: function () {}\n};\nexport var LocationContext = React.createContext(providerlessContextValue);\nexport function useLocationContext() {\n  var context = React.useContext(LocationContext);\n\n  if (process.env.NODE_ENV !== 'production' && (context === undefined || context === providerlessContextValue)) {\n    throw new Error('useQueryParams must be used within a QueryParamProvider');\n  }\n\n  return context;\n}\n/**\n * An internal-only context provider which provides down the most\n * recent location object and a callback to update the history.\n */\n\nexport function LocationProvider(_a) {\n  var history = _a.history,\n      location = _a.location,\n      children = _a.children,\n      stringifyOptions = _a.stringifyOptions;\n  var locationRef = React.useRef(location);\n  React.useEffect(function () {\n    locationRef.current = location;\n  }, [location]); // TODO: we can probably simplify this now that we are reading location from history\n\n  var getLocation = React.useCallback(function () {\n    return locationRef.current;\n  }, [locationRef]);\n  var setLocation = React.useCallback(function (queryReplacements, updateType) {\n    // A ref is needed here to stop setLocation updating constantly (see #46)\n    locationRef.current = createLocationWithChanges(queryReplacements, history == null || history.location == null ? locationRef.current : history.location, updateType, stringifyOptions);\n\n    if (history) {\n      updateUrlQuery(history, locationRef.current, updateType);\n    }\n  }, [history, stringifyOptions]);\n  return React.createElement(LocationContext.Provider, {\n    value: {\n      location: location,\n      getLocation: getLocation,\n      setLocation: setLocation\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/use-query-params/esm/LocationProvider.js"],"names":["React","updateUrlQuery","createLocationWithChanges","providerlessContextValue","location","getLocation","setLocation","LocationContext","createContext","useLocationContext","context","useContext","process","env","NODE_ENV","undefined","Error","LocationProvider","_a","history","children","stringifyOptions","locationRef","useRef","useEffect","current","useCallback","queryReplacements","updateType","createElement","Provider","value"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,yBAAzB,QAA0D,kBAA1D;AACA,IAAIC,wBAAwB,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,EADiB;AAE3BC,EAAAA,WAAW,EAAE,YAAY;AAAE,WAAQ,EAAR;AAAc,GAFd;AAG3BC,EAAAA,WAAW,EAAE,YAAY,CAAG;AAHD,CAA/B;AAKA,OAAO,IAAIC,eAAe,GAAGP,KAAK,CAACQ,aAAN,CAAoBL,wBAApB,CAAtB;AACP,OAAO,SAASM,kBAAT,GAA8B;AACjC,MAAIC,OAAO,GAAGV,KAAK,CAACW,UAAN,CAAiBJ,eAAjB,CAAd;;AACA,MAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,KACCJ,OAAO,KAAKK,SAAZ,IAAyBL,OAAO,KAAKP,wBADtC,CAAJ,EACqE;AACjE,UAAM,IAAIa,KAAJ,CAAU,yDAAV,CAAN;AACH;;AACD,SAAON,OAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASO,gBAAT,CAA0BC,EAA1B,EAA8B;AACjC,MAAIC,OAAO,GAAGD,EAAE,CAACC,OAAjB;AAAA,MAA0Bf,QAAQ,GAAGc,EAAE,CAACd,QAAxC;AAAA,MAAkDgB,QAAQ,GAAGF,EAAE,CAACE,QAAhE;AAAA,MAA0EC,gBAAgB,GAAGH,EAAE,CAACG,gBAAhG;AACA,MAAIC,WAAW,GAAGtB,KAAK,CAACuB,MAAN,CAAanB,QAAb,CAAlB;AACAJ,EAAAA,KAAK,CAACwB,SAAN,CAAgB,YAAY;AACxBF,IAAAA,WAAW,CAACG,OAAZ,GAAsBrB,QAAtB;AACH,GAFD,EAEG,CAACA,QAAD,CAFH,EAHiC,CAMjC;;AACA,MAAIC,WAAW,GAAGL,KAAK,CAAC0B,WAAN,CAAkB,YAAY;AAAE,WAAOJ,WAAW,CAACG,OAAnB;AAA6B,GAA7D,EAA+D,CAC7EH,WAD6E,CAA/D,CAAlB;AAGA,MAAIhB,WAAW,GAAGN,KAAK,CAAC0B,WAAN,CAAkB,UAAUC,iBAAV,EAA6BC,UAA7B,EAAyC;AACzE;AACAN,IAAAA,WAAW,CAACG,OAAZ,GAAsBvB,yBAAyB,CAACyB,iBAAD,EAAoBR,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACf,QAAR,IAAoB,IAAvC,GAC7DkB,WAAW,CAACG,OADiD,GAE7DN,OAAO,CAACf,QAFiC,EAEvBwB,UAFuB,EAEXP,gBAFW,CAA/C;;AAGA,QAAIF,OAAJ,EAAa;AACTlB,MAAAA,cAAc,CAACkB,OAAD,EAAUG,WAAW,CAACG,OAAtB,EAA+BG,UAA/B,CAAd;AACH;AACJ,GARiB,EAQf,CAACT,OAAD,EAAUE,gBAAV,CARe,CAAlB;AASA,SAAQrB,KAAK,CAAC6B,aAAN,CAAoBtB,eAAe,CAACuB,QAApC,EAA8C;AAAEC,IAAAA,KAAK,EAAE;AAAE3B,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,MAAAA,WAAW,EAAEA,WAAnC;AAAgDC,MAAAA,WAAW,EAAEA;AAA7D;AAAT,GAA9C,EAAqIc,QAArI,CAAR;AACH","sourcesContent":["import * as React from 'react';\nimport { updateUrlQuery, createLocationWithChanges } from './updateUrlQuery';\nvar providerlessContextValue = {\n    location: {},\n    getLocation: function () { return ({}); },\n    setLocation: function () { },\n};\nexport var LocationContext = React.createContext(providerlessContextValue);\nexport function useLocationContext() {\n    var context = React.useContext(LocationContext);\n    if (process.env.NODE_ENV !== 'production' &&\n        (context === undefined || context === providerlessContextValue)) {\n        throw new Error('useQueryParams must be used within a QueryParamProvider');\n    }\n    return context;\n}\n/**\n * An internal-only context provider which provides down the most\n * recent location object and a callback to update the history.\n */\nexport function LocationProvider(_a) {\n    var history = _a.history, location = _a.location, children = _a.children, stringifyOptions = _a.stringifyOptions;\n    var locationRef = React.useRef(location);\n    React.useEffect(function () {\n        locationRef.current = location;\n    }, [location]);\n    // TODO: we can probably simplify this now that we are reading location from history\n    var getLocation = React.useCallback(function () { return locationRef.current; }, [\n        locationRef,\n    ]);\n    var setLocation = React.useCallback(function (queryReplacements, updateType) {\n        // A ref is needed here to stop setLocation updating constantly (see #46)\n        locationRef.current = createLocationWithChanges(queryReplacements, history == null || history.location == null\n            ? locationRef.current\n            : history.location, updateType, stringifyOptions);\n        if (history) {\n            updateUrlQuery(history, locationRef.current, updateType);\n        }\n    }, [history, stringifyOptions]);\n    return (React.createElement(LocationContext.Provider, { value: { location: location, getLocation: getLocation, setLocation: setLocation } }, children));\n}\n"]},"metadata":{},"sourceType":"module"}