{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport useQueryParams from './useQueryParams';\n/**\n * HOC to provide query parameters via props `query` and `setQuery`\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\n\nexport function withQueryParams(paramConfigMap, WrappedComponent) {\n  // return a FC that takes props excluding query and setQuery\n  var Component = function (props) {\n    var _a = useQueryParams(paramConfigMap),\n        query = _a[0],\n        setQuery = _a[1]; // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n\n\n    return React.createElement(WrappedComponent, __assign({\n      query: query,\n      setQuery: setQuery\n    }, props));\n  };\n\n  Component.displayName = \"withQueryParams(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n  return Component;\n}\nexport default withQueryParams;\n/**\n * HOC to provide query parameters via props mapToProps (similar to\n * react-redux connect style mapStateToProps)\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\n\nexport function withQueryParamsMapped(paramConfigMap, mapToProps, WrappedComponent) {\n  // return a FC that takes props excluding query and setQuery\n  var Component = function (props) {\n    var _a = useQueryParams(paramConfigMap),\n        query = _a[0],\n        setQuery = _a[1];\n\n    var propsToAdd = mapToProps(query, setQuery, props); // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n\n    return React.createElement(WrappedComponent, __assign({}, propsToAdd, props));\n  };\n\n  Component.displayName = \"withQueryParams(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n  return Component;\n}","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/use-query-params/esm/withQueryParams.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useQueryParams","withQueryParams","paramConfigMap","WrappedComponent","Component","props","_a","query","setQuery","createElement","displayName","name","withQueryParamsMapped","mapToProps","propsToAdd"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKO,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,cAAzB,EAAyCC,gBAAzC,EAA2D;AAC9D;AACA,MAAIC,SAAS,GAAG,UAAUC,KAAV,EAAiB;AAC7B,QAAIC,EAAE,GAAGN,cAAc,CAACE,cAAD,CAAvB;AAAA,QAAyCK,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAnD;AAAA,QAAwDE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAArE,CAD6B,CAE7B;;;AACA,WAAQP,KAAK,CAACU,aAAN,CAAoBN,gBAApB,EAAsClB,QAAQ,CAAC;AAAEsB,MAAAA,KAAK,EAAEA,KAAT;AAAgBC,MAAAA,QAAQ,EAAEA;AAA1B,KAAD,EAAuCH,KAAvC,CAA9C,CAAR;AACH,GAJD;;AAKAD,EAAAA,SAAS,CAACM,WAAV,GAAwB,sBAAsBP,gBAAgB,CAACO,WAAjB,IAAgCP,gBAAgB,CAACQ,IAAjD,IAAyD,WAA/E,IAA8F,GAAtH;AACA,SAAOP,SAAP;AACH;AACD,eAAeH,eAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,qBAAT,CAA+BV,cAA/B,EAA+CW,UAA/C,EAA2DV,gBAA3D,EAA6E;AAChF;AACA,MAAIC,SAAS,GAAG,UAAUC,KAAV,EAAiB;AAC7B,QAAIC,EAAE,GAAGN,cAAc,CAACE,cAAD,CAAvB;AAAA,QAAyCK,KAAK,GAAGD,EAAE,CAAC,CAAD,CAAnD;AAAA,QAAwDE,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAArE;;AACA,QAAIQ,UAAU,GAAGD,UAAU,CAACN,KAAD,EAAQC,QAAR,EAAkBH,KAAlB,CAA3B,CAF6B,CAG7B;;AACA,WAAON,KAAK,CAACU,aAAN,CAAoBN,gBAApB,EAAsClB,QAAQ,CAAC,EAAD,EAAK6B,UAAL,EAAiBT,KAAjB,CAA9C,CAAP;AACH,GALD;;AAMAD,EAAAA,SAAS,CAACM,WAAV,GAAwB,sBAAsBP,gBAAgB,CAACO,WAAjB,IAAgCP,gBAAgB,CAACQ,IAAjD,IAAyD,WAA/E,IAA8F,GAAtH;AACA,SAAOP,SAAP;AACH","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport useQueryParams from './useQueryParams';\n/**\n * HOC to provide query parameters via props `query` and `setQuery`\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\nexport function withQueryParams(paramConfigMap, WrappedComponent) {\n    // return a FC that takes props excluding query and setQuery\n    var Component = function (props) {\n        var _a = useQueryParams(paramConfigMap), query = _a[0], setQuery = _a[1];\n        // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n        return (React.createElement(WrappedComponent, __assign({ query: query, setQuery: setQuery }, props)));\n    };\n    Component.displayName = \"withQueryParams(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n    return Component;\n}\nexport default withQueryParams;\n/**\n * HOC to provide query parameters via props mapToProps (similar to\n * react-redux connect style mapStateToProps)\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\nexport function withQueryParamsMapped(paramConfigMap, mapToProps, WrappedComponent) {\n    // return a FC that takes props excluding query and setQuery\n    var Component = function (props) {\n        var _a = useQueryParams(paramConfigMap), query = _a[0], setQuery = _a[1];\n        var propsToAdd = mapToProps(query, setQuery, props);\n        // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n        return React.createElement(WrappedComponent, __assign({}, propsToAdd, props));\n    };\n    Component.displayName = \"withQueryParams(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n    return Component;\n}\n"]},"metadata":{},"sourceType":"module"}