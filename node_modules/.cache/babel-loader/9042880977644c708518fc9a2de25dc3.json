{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n/**\n * Interprets an encoded string and returns either the string or null/undefined if not available.\n * Ignores array inputs (takes just first element in array)\n * @param input encoded string\n */\n\n\nfunction getEncodedValue(input, allowEmptyString) {\n  if (input == null) {\n    return input;\n  } // '' or []\n\n\n  if (input.length === 0 && (!allowEmptyString || allowEmptyString && input !== '')) {\n    return null;\n  }\n\n  var str = input instanceof Array ? input[0] : input;\n\n  if (str == null) {\n    return str;\n  }\n\n  if (!allowEmptyString && str === '') {\n    return null;\n  }\n\n  return str;\n}\n/**\n * Interprets an encoded string and return null/undefined or an array with\n * the encoded string contents\n * @param input encoded string\n */\n\n\nfunction getEncodedValueArray(input) {\n  if (input == null) {\n    return input;\n  }\n\n  return input instanceof Array ? input : input === '' ? [] : [input];\n}\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\n\nexport function encodeDate(date) {\n  if (date == null) {\n    return date;\n  }\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return year + \"-\" + (month < 10 ? \"0\" + month : month) + \"-\" + (day < 10 ? \"0\" + day : day);\n}\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\n\nexport function decodeDate(input) {\n  var dateString = getEncodedValue(input);\n  if (dateString == null) return dateString;\n  var parts = dateString.split('-'); // may only be a year so won't even have a month\n\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  var decoded = new (Date.bind.apply(Date, __spreadArray([void 0], parts)))();\n\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n\n  return decoded;\n}\n/**\n * Encodes a date as a string in ISO 8601 (\"2019-05-28T10:58:40Z\") format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\nexport function encodeDateTime(date) {\n  if (date == null) {\n    return date;\n  }\n\n  return date.toISOString();\n}\n/**\n * Converts a date in the https://en.wikipedia.org/wiki/ISO_8601 format.\n * For allowed inputs see specs:\n *  - https://tools.ietf.org/html/rfc2822#page-14\n *  - http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '1995-12-17T03:24:00'\n * @return {Date} parsed date\n */\n\nexport function decodeDateTime(input) {\n  var dateString = getEncodedValue(input);\n  if (dateString == null) return dateString;\n  var decoded = new Date(dateString);\n\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n\n  return decoded;\n}\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\n\nexport function encodeBoolean(bool) {\n  if (bool == null) {\n    return bool;\n  }\n\n  return bool ? '1' : '0';\n}\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\n\nexport function decodeBoolean(input) {\n  var boolStr = getEncodedValue(input);\n  if (boolStr == null) return boolStr;\n\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return null;\n}\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\n\nexport function encodeNumber(num) {\n  if (num == null) {\n    return num;\n  }\n\n  return String(num);\n}\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\n\nexport function decodeNumber(input) {\n  var numStr = getEncodedValue(input);\n  if (numStr == null) return numStr;\n  if (numStr === '') return null;\n  var result = +numStr;\n  return result;\n}\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\n\nexport function encodeString(str) {\n  if (str == null) {\n    return str;\n  }\n\n  return String(str);\n}\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\n\nexport function decodeString(input) {\n  var str = getEncodedValue(input, true);\n  if (str == null) return str;\n  return String(str);\n}\n/**\n * Decodes an enum value while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @param {String[]} enumValues allowed enum values\n * @return {String} the string value from enumValues\n */\n\nexport function decodeEnum(input, enumValues) {\n  var str = decodeString(input);\n  if (str == null) return str;\n  return enumValues.includes(str) ? str : undefined;\n}\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\n\nexport function encodeJson(any) {\n  if (any == null) {\n    return any;\n  }\n\n  return JSON.stringify(any);\n}\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\n\nexport function decodeJson(input) {\n  var jsonStr = getEncodedValue(input);\n  if (jsonStr == null) return jsonStr;\n  var result = null;\n\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nexport function encodeArray(array) {\n  if (array == null) {\n    return array;\n  }\n\n  return array;\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nexport function decodeArray(input) {\n  var arr = getEncodedValueArray(input);\n  if (arr == null) return arr;\n  return arr;\n}\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nexport function encodeNumericArray(array) {\n  if (array == null) {\n    return array;\n  }\n\n  return array.map(String);\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nexport function decodeNumericArray(input) {\n  var arr = decodeArray(input);\n  if (arr == null) return arr;\n  return arr.map(function (d) {\n    return d === '' || d == null ? null : +d;\n  });\n}\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\n\nexport function encodeDelimitedArray(array, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  if (array == null) {\n    return array;\n  }\n\n  return array.join(entrySeparator);\n}\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\n\nexport function decodeDelimitedArray(input, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  var arrayStr = getEncodedValue(input, true);\n  if (arrayStr == null) return arrayStr;\n  if (arrayStr === '') return [];\n  return arrayStr.split(entrySeparator);\n}\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nexport var encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nexport function decodeDelimitedNumericArray(arrayStr, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n  if (decoded == null) return decoded;\n  return decoded.map(function (d) {\n    return d === '' || d == null ? null : +d;\n  });\n}\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexport function encodeObject(obj, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  if (obj == null) return obj; // null or undefined\n\n  if (!Object.keys(obj).length) return ''; // {} case\n\n  return Object.keys(obj).map(function (key) {\n    return \"\" + key + keyValSeparator + obj[key];\n  }).join(entrySeparator);\n}\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nexport function decodeObject(input, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  var objStr = getEncodedValue(input, true);\n  if (objStr == null) return objStr;\n  if (objStr === '') return {};\n  var obj = {};\n  var keyValSeparatorRegExp = new RegExp(keyValSeparator + \"(.*)\");\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _a = entryStr.split(keyValSeparatorRegExp),\n        key = _a[0],\n        value = _a[1];\n\n    obj[key] = value;\n  });\n  return obj;\n}\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexport var encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nexport function decodeNumericObject(input, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n\n  var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n  if (decoded == null) return decoded; // convert to numbers\n\n  var decodedNumberObj = {};\n\n  for (var _i = 0, _a = Object.keys(decoded); _i < _a.length; _i++) {\n    var key = _a[_i];\n    decodedNumberObj[key] = decodeNumber(decoded[key]);\n  }\n\n  return decodedNumberObj;\n}","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/serialize-query-params/esm/serialize.js"],"names":["__spreadArray","to","from","i","il","length","j","getEncodedValue","input","allowEmptyString","str","Array","getEncodedValueArray","encodeDate","date","year","getFullYear","month","getMonth","day","getDate","decodeDate","dateString","parts","split","decoded","Date","bind","apply","isNaN","getTime","encodeDateTime","toISOString","decodeDateTime","encodeBoolean","bool","decodeBoolean","boolStr","encodeNumber","num","String","decodeNumber","numStr","result","encodeString","decodeString","decodeEnum","enumValues","includes","undefined","encodeJson","any","JSON","stringify","decodeJson","jsonStr","parse","e","encodeArray","array","decodeArray","arr","encodeNumericArray","map","decodeNumericArray","d","encodeDelimitedArray","entrySeparator","join","decodeDelimitedArray","arrayStr","encodeDelimitedNumericArray","decodeDelimitedNumericArray","encodeObject","obj","keyValSeparator","Object","keys","key","decodeObject","objStr","keyValSeparatorRegExp","RegExp","forEach","entryStr","_a","value","encodeNumericObject","decodeNumericObject","decodedNumberObj","_i"],"mappings":"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","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n/**\n * Interprets an encoded string and returns either the string or null/undefined if not available.\n * Ignores array inputs (takes just first element in array)\n * @param input encoded string\n */\nfunction getEncodedValue(input, allowEmptyString) {\n    if (input == null) {\n        return input;\n    }\n    // '' or []\n    if (input.length === 0 &&\n        (!allowEmptyString || (allowEmptyString && input !== ''))) {\n        return null;\n    }\n    var str = input instanceof Array ? input[0] : input;\n    if (str == null) {\n        return str;\n    }\n    if (!allowEmptyString && str === '') {\n        return null;\n    }\n    return str;\n}\n/**\n * Interprets an encoded string and return null/undefined or an array with\n * the encoded string contents\n * @param input encoded string\n */\nfunction getEncodedValueArray(input) {\n    if (input == null) {\n        return input;\n    }\n    return input instanceof Array ? input : input === '' ? [] : [input];\n}\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDate(date) {\n    if (date == null) {\n        return date;\n    }\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    return year + \"-\" + (month < 10 ? \"0\" + month : month) + \"-\" + (day < 10 ? \"0\" + day : day);\n}\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\nexport function decodeDate(input) {\n    var dateString = getEncodedValue(input);\n    if (dateString == null)\n        return dateString;\n    var parts = dateString.split('-');\n    // may only be a year so won't even have a month\n    if (parts[1] != null) {\n        parts[1] -= 1; // Note: months are 0-based\n    }\n    else {\n        // just a year, set the month and day to the first\n        parts[1] = 0;\n        parts[2] = 1;\n    }\n    var decoded = new (Date.bind.apply(Date, __spreadArray([void 0], parts)))();\n    if (isNaN(decoded.getTime())) {\n        return null;\n    }\n    return decoded;\n}\n/**\n * Encodes a date as a string in ISO 8601 (\"2019-05-28T10:58:40Z\") format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDateTime(date) {\n    if (date == null) {\n        return date;\n    }\n    return date.toISOString();\n}\n/**\n * Converts a date in the https://en.wikipedia.org/wiki/ISO_8601 format.\n * For allowed inputs see specs:\n *  - https://tools.ietf.org/html/rfc2822#page-14\n *  - http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '1995-12-17T03:24:00'\n * @return {Date} parsed date\n */\nexport function decodeDateTime(input) {\n    var dateString = getEncodedValue(input);\n    if (dateString == null)\n        return dateString;\n    var decoded = new Date(dateString);\n    if (isNaN(decoded.getTime())) {\n        return null;\n    }\n    return decoded;\n}\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\nexport function encodeBoolean(bool) {\n    if (bool == null) {\n        return bool;\n    }\n    return bool ? '1' : '0';\n}\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\nexport function decodeBoolean(input) {\n    var boolStr = getEncodedValue(input);\n    if (boolStr == null)\n        return boolStr;\n    if (boolStr === '1') {\n        return true;\n    }\n    else if (boolStr === '0') {\n        return false;\n    }\n    return null;\n}\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\nexport function encodeNumber(num) {\n    if (num == null) {\n        return num;\n    }\n    return String(num);\n}\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\nexport function decodeNumber(input) {\n    var numStr = getEncodedValue(input);\n    if (numStr == null)\n        return numStr;\n    if (numStr === '')\n        return null;\n    var result = +numStr;\n    return result;\n}\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\nexport function encodeString(str) {\n    if (str == null) {\n        return str;\n    }\n    return String(str);\n}\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\nexport function decodeString(input) {\n    var str = getEncodedValue(input, true);\n    if (str == null)\n        return str;\n    return String(str);\n}\n/**\n * Decodes an enum value while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @param {String[]} enumValues allowed enum values\n * @return {String} the string value from enumValues\n */\nexport function decodeEnum(input, enumValues) {\n    var str = decodeString(input);\n    if (str == null)\n        return str;\n    return enumValues.includes(str) ? str : undefined;\n}\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\nexport function encodeJson(any) {\n    if (any == null) {\n        return any;\n    }\n    return JSON.stringify(any);\n}\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\nexport function decodeJson(input) {\n    var jsonStr = getEncodedValue(input);\n    if (jsonStr == null)\n        return jsonStr;\n    var result = null;\n    try {\n        result = JSON.parse(jsonStr);\n    }\n    catch (e) {\n        /* ignore errors, returning undefined */\n    }\n    return result;\n}\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeArray(array) {\n    if (array == null) {\n        return array;\n    }\n    return array;\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeArray(input) {\n    var arr = getEncodedValueArray(input);\n    if (arr == null)\n        return arr;\n    return arr;\n}\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeNumericArray(array) {\n    if (array == null) {\n        return array;\n    }\n    return array.map(String);\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeNumericArray(input) {\n    var arr = decodeArray(input);\n    if (arr == null)\n        return arr;\n    return arr.map(function (d) { return (d === '' || d == null ? null : +d); });\n}\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\nexport function encodeDelimitedArray(array, entrySeparator) {\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    if (array == null) {\n        return array;\n    }\n    return array.join(entrySeparator);\n}\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedArray(input, entrySeparator) {\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    var arrayStr = getEncodedValue(input, true);\n    if (arrayStr == null)\n        return arrayStr;\n    if (arrayStr === '')\n        return [];\n    return arrayStr.split(entrySeparator);\n}\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\nexport var encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedNumericArray(arrayStr, entrySeparator) {\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n    if (decoded == null)\n        return decoded;\n    return decoded.map(function (d) { return (d === '' || d == null ? null : +d); });\n}\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport function encodeObject(obj, keyValSeparator, entrySeparator) {\n    if (keyValSeparator === void 0) { keyValSeparator = '-'; }\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    if (obj == null)\n        return obj; // null or undefined\n    if (!Object.keys(obj).length)\n        return ''; // {} case\n    return Object.keys(obj)\n        .map(function (key) { return \"\" + key + keyValSeparator + obj[key]; })\n        .join(entrySeparator);\n}\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeObject(input, keyValSeparator, entrySeparator) {\n    if (keyValSeparator === void 0) { keyValSeparator = '-'; }\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    var objStr = getEncodedValue(input, true);\n    if (objStr == null)\n        return objStr;\n    if (objStr === '')\n        return {};\n    var obj = {};\n    var keyValSeparatorRegExp = new RegExp(keyValSeparator + \"(.*)\");\n    objStr.split(entrySeparator).forEach(function (entryStr) {\n        var _a = entryStr.split(keyValSeparatorRegExp), key = _a[0], value = _a[1];\n        obj[key] = value;\n    });\n    return obj;\n}\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport var encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeNumericObject(input, keyValSeparator, entrySeparator) {\n    if (keyValSeparator === void 0) { keyValSeparator = '-'; }\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n    if (decoded == null)\n        return decoded;\n    // convert to numbers\n    var decodedNumberObj = {};\n    for (var _i = 0, _a = Object.keys(decoded); _i < _a.length; _i++) {\n        var key = _a[_i];\n        decodedNumberObj[key] = decodeNumber(decoded[key]);\n    }\n    return decodedNumberObj;\n}\n"]},"metadata":{},"sourceType":"module"}