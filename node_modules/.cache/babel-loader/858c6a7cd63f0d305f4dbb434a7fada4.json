{"ast":null,"code":"/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function encodeQueryParams(paramConfigMap, query) {\n  var encodedQuery = {};\n  var paramNames = Object.keys(query);\n\n  for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n    var paramName = paramNames_1[_i];\n    var decodedValue = query[paramName];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Encoding parameter \" + paramName + \" as string since it was not configured.\");\n      } // NOTE: we could just not encode it, but it is probably convenient to have\n      // it be included by default as a string type.\n\n\n      encodedQuery[paramName] = decodedValue == null ? decodedValue : String(decodedValue);\n    } else {\n      encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n    }\n  }\n\n  return encodedQuery;\n}\nexport default encodeQueryParams;","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/serialize-query-params/esm/encodeQueryParams.js"],"names":["encodeQueryParams","paramConfigMap","query","encodedQuery","paramNames","Object","keys","_i","paramNames_1","length","paramName","decodedValue","process","env","NODE_ENV","console","warn","String","encode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAT,CAA2BC,cAA3B,EAA2CC,KAA3C,EAAkD;AACrD,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAjB;;AACA,OAAK,IAAIK,EAAE,GAAG,CAAT,EAAYC,YAAY,GAAGJ,UAAhC,EAA4CG,EAAE,GAAGC,YAAY,CAACC,MAA9D,EAAsEF,EAAE,EAAxE,EAA4E;AACxE,QAAIG,SAAS,GAAGF,YAAY,CAACD,EAAD,CAA5B;AACA,QAAII,YAAY,GAAGT,KAAK,CAACQ,SAAD,CAAxB;;AACA,QAAI,CAACT,cAAc,CAACS,SAAD,CAAnB,EAAgC;AAC5B,UAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCC,QAAAA,OAAO,CAACC,IAAR,CAAa,wBAAwBN,SAAxB,GAAoC,yCAAjD;AACH,OAH2B,CAI5B;AACA;;;AACAP,MAAAA,YAAY,CAACO,SAAD,CAAZ,GACIC,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsCM,MAAM,CAACN,YAAD,CADhD;AAEH,KARD,MASK;AACDR,MAAAA,YAAY,CAACO,SAAD,CAAZ,GAA0BT,cAAc,CAACS,SAAD,CAAd,CAA0BQ,MAA1B,CAAiChB,KAAK,CAACQ,SAAD,CAAtC,CAA1B;AACH;AACJ;;AACD,SAAOP,YAAP;AACH;AACD,eAAeH,iBAAf","sourcesContent":["/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function encodeQueryParams(paramConfigMap, query) {\n    var encodedQuery = {};\n    var paramNames = Object.keys(query);\n    for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n        var paramName = paramNames_1[_i];\n        var decodedValue = query[paramName];\n        if (!paramConfigMap[paramName]) {\n            if (process.env.NODE_ENV === 'development') {\n                console.warn(\"Encoding parameter \" + paramName + \" as string since it was not configured.\");\n            }\n            // NOTE: we could just not encode it, but it is probably convenient to have\n            // it be included by default as a string type.\n            encodedQuery[paramName] =\n                decodedValue == null ? decodedValue : String(decodedValue);\n        }\n        else {\n            encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n        }\n    }\n    return encodedQuery;\n}\nexport default encodeQueryParams;\n"]},"metadata":{},"sourceType":"module"}