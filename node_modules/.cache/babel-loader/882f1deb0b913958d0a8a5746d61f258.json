{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { stringify, parse as parseQueryString, parseUrl } from 'query-string';\n/**\n * An example of a transformSearchString function that undoes encoding of\n * common JSON characters that are technically allowed in URLs.\n */\n\nvar JSON_SAFE_CHARS = \"{}[],\\\":\".split('').map(function (d) {\n  return [d, encodeURIComponent(d)];\n});\nexport function transformSearchStringJsonSafe(searchString) {\n  var str = searchString;\n\n  for (var _i = 0, JSON_SAFE_CHARS_1 = JSON_SAFE_CHARS; _i < JSON_SAFE_CHARS_1.length; _i++) {\n    var _a = JSON_SAFE_CHARS_1[_i],\n        char = _a[0],\n        code = _a[1];\n    str = str.replace(new RegExp('\\\\' + code, 'g'), char);\n  }\n\n  return str;\n}\n/**\n * Update a location, wiping out parameters not included in encodedQuery\n * If a param is set to undefined it will be removed from the URL.\n */\n\nexport function updateLocation(encodedQuery, location, stringifyOptions) {\n  var encodedSearchString = stringify(encodedQuery, stringifyOptions);\n\n  if (stringifyOptions && stringifyOptions.transformSearchString) {\n    encodedSearchString = stringifyOptions.transformSearchString(encodedSearchString);\n  }\n\n  var search = encodedSearchString.length ? \"?\" + encodedSearchString : '';\n  var href = parseUrl(location.href || '').url + search;\n\n  var newLocation = __assign(__assign({}, location), {\n    key: \"\" + Date.now(),\n    // needed for some routers (e.g. react-router)\n    href: href,\n    search: search,\n    query: encodedQuery\n  });\n\n  return newLocation;\n}\n/**\n * Update a location while retaining existing parameters.\n * If a param is set to undefined it will be removed from the URL.\n */\n\nexport function updateInLocation(encodedQueryReplacements, location, stringifyOptions) {\n  // explicitly avoid parsing numbers to ensure the\n  // return type has the same shape as EncodeQuery\n  var currQuery = parseQueryString(location.search, {\n    parseNumbers: false\n  });\n\n  var newQuery = __assign(__assign({}, currQuery), encodedQueryReplacements);\n\n  return updateLocation(newQuery, location, stringifyOptions);\n}","map":{"version":3,"sources":["/Users/zahrajou/Desktop/Ever-service/node_modules/serialize-query-params/esm/updateLocation.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","stringify","parse","parseQueryString","parseUrl","JSON_SAFE_CHARS","split","map","d","encodeURIComponent","transformSearchStringJsonSafe","searchString","str","_i","JSON_SAFE_CHARS_1","_a","char","code","replace","RegExp","updateLocation","encodedQuery","location","stringifyOptions","encodedSearchString","transformSearchString","search","href","url","newLocation","key","Date","now","query","updateInLocation","encodedQueryReplacements","currQuery","parseNumbers","newQuery"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { stringify, parse as parseQueryString, parseUrl, } from 'query-string';\n/**\n * An example of a transformSearchString function that undoes encoding of\n * common JSON characters that are technically allowed in URLs.\n */\nvar JSON_SAFE_CHARS = \"{}[],\\\":\"\n    .split('')\n    .map(function (d) { return [d, encodeURIComponent(d)]; });\nexport function transformSearchStringJsonSafe(searchString) {\n    var str = searchString;\n    for (var _i = 0, JSON_SAFE_CHARS_1 = JSON_SAFE_CHARS; _i < JSON_SAFE_CHARS_1.length; _i++) {\n        var _a = JSON_SAFE_CHARS_1[_i], char = _a[0], code = _a[1];\n        str = str.replace(new RegExp('\\\\' + code, 'g'), char);\n    }\n    return str;\n}\n/**\n * Update a location, wiping out parameters not included in encodedQuery\n * If a param is set to undefined it will be removed from the URL.\n */\nexport function updateLocation(encodedQuery, location, stringifyOptions) {\n    var encodedSearchString = stringify(encodedQuery, stringifyOptions);\n    if (stringifyOptions && stringifyOptions.transformSearchString) {\n        encodedSearchString = stringifyOptions.transformSearchString(encodedSearchString);\n    }\n    var search = encodedSearchString.length ? \"?\" + encodedSearchString : '';\n    var href = parseUrl(location.href || '').url + search;\n    var newLocation = __assign(__assign({}, location), { key: \"\" + Date.now(), // needed for some routers (e.g. react-router)\n        href: href,\n        search: search, query: encodedQuery });\n    return newLocation;\n}\n/**\n * Update a location while retaining existing parameters.\n * If a param is set to undefined it will be removed from the URL.\n */\nexport function updateInLocation(encodedQueryReplacements, location, stringifyOptions) {\n    // explicitly avoid parsing numbers to ensure the\n    // return type has the same shape as EncodeQuery\n    var currQuery = parseQueryString(location.search, { parseNumbers: false });\n    var newQuery = __assign(__assign({}, currQuery), encodedQueryReplacements);\n    return updateLocation(newQuery, location, stringifyOptions);\n}\n"]},"metadata":{},"sourceType":"module"}