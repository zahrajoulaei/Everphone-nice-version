{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/omitKeys.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\ntype Payload<T> = {\n  _subscription: React.MutableRefObject<Subscription | undefined>;\n  _props: React.MutableRefObject<Props<T>>;\n};\n\nconst tearDown = (\n  _subscription: React.MutableRefObject<Subscription | undefined>,\n) => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = <T>({ _subscription, _props }: Payload<T>) => {\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback,\n    });\n  }\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _subscription = React.useRef<Subscription>();\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  updateSubscriptionProps({\n    _subscription,\n    _props,\n  });\n\n  React.useEffect(() => {\n    updateSubscriptionProps({\n      _subscription,\n      _props,\n    });\n\n    return () => tearDown(_subscription);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        formState.name,\n      ) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import * as React from 'react';\n\nimport { generateWatchOutput } from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: TFieldNames;\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  });\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n    setFields(_fieldIds.current);\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_subscription","unsubscribe","updateSubscriptionProps","_props","disabled","subject","subscribe","next","callback","useSubscribe","props","useRef","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","array","_stateFlags","action","unregister","keepDefaultValue","onChange","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","schemaErrorLookup","join","foundError","pop","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","isFieldWatched","isBlurEvent","has","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","resetField","clearErrors","inputName","setError","setFocus","render","Provider","children","setFields","mapIds","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchField","then","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl"],"mappings":"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"}